openapi: 3.0.0
info:
  title: Restaurant API
  description: Simple API for keeping track of orders in a restaurant.
  version: 0.1.9
tags:
  - name: tables
    description: Information for orders of tables
  - name: menu-items
    description: All possible items which can be ordered
paths:
  /tables/{table-number}/orders:
    get:
      tags:
        - tables
      summary: Get all remaining orders for a table. If a table does not exist then the menu_items in the response will be empty.
      parameters:
        - name: table-number
          in: path
          description: The table ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error. Failed to get data.
    post:
      tags:
        - tables
      summary: Adds orders to a table
      description: The idempotency key is optional. If two requests with the same idempotency key are received, the second one will not be committed. This can be used to ensure that, if the connection is dropped during a POST operation, the request can be safely sent without the risk of duplicating data.
      parameters:
        - name: table-number
          in: path
          description: The table ID
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - orders
              properties:
                idempotency_key:
                  type: string
                  format: uuid
                orders:
                  type: array
                  items:
                    type: object
                    properties:
                      menu_item_id:
                        type: number
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
        '400':
          description: Malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Format of data in body is incorrect"
        '409':
          description: Idempotency key conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "This request has already been sent"
        '422':
          description: The provided menu_item_id does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Menu item with id 1 does not exist"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Server error. Failed to add order.
  /tables/{table-number}/orders/{order-id}:
    get:
      tags:
        - tables
      summary: Get information for a specific order of a specific table
      parameters:
        - name: order-id
          in: path
          description: The Order ID
          required: true
          schema:
            type: number
        - name: table-number
          in: path
          description: The table which the order belongs to
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Table or Order does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Table with id 1 does not exist"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - tables
      summary: Delete a given order from a table
      parameters:
        - name: order-id
          in: path
          description: The Order ID
          required: true
          schema:
            type: string
        - name: table-number
          in: path
          description: The table which the order belongs to
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Success
        '404':
          description: Table or Order does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Table with id 1 does not exist"
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /menu-items:
    get:
      tags:
        - menu-items
      summary: Get all menu items in the database
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  menu_items:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: number
        table_number:
          type: number
        menu_item_id:
          type: number
        menu_item_name:
          type: string
        minutes_to_cook:
          type: number